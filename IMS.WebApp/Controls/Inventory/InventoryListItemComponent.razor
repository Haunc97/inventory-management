@inject NavigationManager NavigationManager

@if (Inventories != null && Inventories.Any())
{
    @foreach (var inv in Inventories)
    {
        <tr>
            <td>@inv.InventoryName</td>
            <td>@inv.Quantity</td>
            <td>@inv.Price.ToString("c")</td> @*c: currency format*@
            <td>
                <button
                    type="button"
                    class="btn btn-light" @onclick="@(() => EditInventory(inv.InventoryId))">Edit</button>
                    @*
                        onclick event is actually a event callback. Event callback is a struct which wraps arround delegate.
                        So when we use the function without a parameter, it works like a delegate.
                        But when you attach a parameter, then it's not a delegate anymore. So you can't assign that to the onclick event.
                        That's why we need to use Arrow Function to provide a delegate
                    *@
            </td>
        </tr>
    }
}


@code {
    [Parameter]
    public List<Inventory> Inventories { get; set; } = new List<Inventory>();

    private void EditInventory(int inventoryId)
    {
        NavigationManager.NavigateTo($"/editinventory/{inventoryId}");
    }
}
