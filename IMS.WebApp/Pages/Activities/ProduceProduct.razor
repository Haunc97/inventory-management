@page "/produce"
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IProduceProductUseCase ProduceProductUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase

@inject IJSRuntime JSRuntime

<h3>Produce Product</h3>
<br />
<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="prodNo">Production No.</label>
        <InputText id="prodNo"
                   @bind-Value="produceViewModel.ProductionNumber"
                   class="form-control">
        </InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <AutoCompleteComponent Label="Product to Produce" SearchFunction="SearchProduct" OnItemSelected="OnItemSelected"></AutoCompleteComponent>

            <input type="hidden" @bind-value="produceViewModel.ProductId" />
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                   @bind-Value="produceViewModel.QuantityToProduce"
                   class="form-control">
        </InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Produce</button>
    <button type="button" class="btn btn-secondary">Cancel</button>
</EditForm>

@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product? selectedProduct = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmition", "produce-form");
        }
    }

    private async Task Produce()
    {
        await ProduceProductUseCase.ExecuteAsync(
            produceViewModel.ProductionNumber,
            this.selectedProduct,
            produceViewModel.QuantityToProduce,
            "System");

        this.produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return null;

        var invs = await ViewProductsByNameUseCase.ExecuteAsync(name);

        return invs.Select(x => new ItemViewModel
            {
                Id = x.ProductId,
                Name = x.ProductName
            }).ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        this.produceViewModel.ProductId = item.Id;
        this.produceViewModel.Product = this.selectedProduct;
    }
}
