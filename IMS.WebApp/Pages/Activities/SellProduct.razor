@page "/sell"

@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject ISellProductUseCase SellProductUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase

@inject IJSRuntime JSRuntime

@attribute [Authorize(Policy = "Sales")]

<h3>Sell Product</h3>
<br />
<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label id="saleNo">Sale Order No.</label>
        <InputText id="saleNo"
                   @bind-Value="sellViewModel.SalesOrderNumber"
                   class="form-control">
        </InputText>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <AutoCompleteComponent Label="Product to sell"
                                   SearchFunction="SearchProduct"
                                   OnItemSelected="OnItemSelected">
            </AutoCompleteComponent>
        </div>
    </div>

    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                     @bind-Value="sellViewModel.QuantityToSell"
                     class="form-control">
        </InputNumber>
    </div>

    <div class="form-group">
        <label for="uprice">Unit Price</label>
        <InputNumber id="uprice"
                     @bind-Value="sellViewModel.UnitPrice"
                     class="form-control">
        </InputNumber>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Sell</button>
    <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private AuthenticationState? authenticationState;

    private SellViewModel sellViewModel = new SellViewModel();
    private Product? selectedProduct = null;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null) authenticationState = await authenticationStateTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmition", "sell-form");
        }
    }

    private async Task Sell()
    {
        if (authenticationState != null &&
            selectedProduct != null &&
            !string.IsNullOrWhiteSpace(authenticationState.User?.Identity?.Name))
        {
            await SellProductUseCase.ExecuteAsync(
                sellViewModel.SalesOrderNumber,
                this.selectedProduct,
                sellViewModel.QuantityToSell,
                sellViewModel.UnitPrice,
                authenticationState.User.Identity.Name
            );
        }

        this.Reset();
    }

    private void Reset()
    {
        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return null;

        var invs = await ViewProductsByNameUseCase.ExecuteAsync(name);

        return invs.Select(x => new ItemViewModel
            {
                Id = x.ProductId,
                Name = x.ProductName
            }).ToList();
    }

    private async Task OnItemSelected(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        this.sellViewModel.ProductId = item.Id;
        this.sellViewModel.Product = this.selectedProduct;
        this.sellViewModel.UnitPrice = this.selectedProduct.Price;
    }
}